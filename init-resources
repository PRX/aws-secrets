#!/bin/bash -e

# init-resources
#
# Initialize a set of AWS resources to manage secret keys for an application.
#
die() {
    echo "$@"
    exit
}

app=$1

[ -z "$app" ] && die "Usage: $0 <application name>"

[[ "$app" =~ ^[a-z0-9_]+$ ]] || die "The application name should consist only of a-z, 0-9 or _ charaters."

echo "Initializing resources for $app.";

# KMS alias
alias=$app-secrets
found=`aws kms list-aliases --query "Aliases[?AliasName == 'alias/$alias'] | [0].TargetKeyId" --output text`
if [ "$found" == "None" ]; then
    echo 'Making new key'
    key_id=`aws kms create-key --query 'KeyMetadata.KeyId' --output text`
    echo "Making new alias $alias"
    aws kms create-alias --target-key-id $key_id --alias-name "alias/$alias"
else
    echo "Found existing alias $alias, key $found"
    key_id=$found
fi

# S3 bucket
bucket=$app-secrets
found=`aws s3api list-buckets --query "Buckets[?Name == '$bucket'] | [0].Name" --output text`
if [ "$found" == "None" ]; then
    echo "Creating bucket $bucket"
    made=`aws s3api create-bucket --bucket $bucket --acl private --output text`
else
    echo "Found existing bucket $bucket"
fi

# IAM Role for instances
instancerole=$app-secrets-instances
instance_access_policy=$app-s3-read
found=`aws iam list-roles --query "Roles[?RoleName == '$instancerole'] | [0].RoleId" --output text`
if [ "$found" == "None" ]; then
    echo "Creating new role for instances: $instancerole"
    trustpolicy=`mktemp`
    cat <<-TRUSTPOLICY >>$trustpolicy
	{
	  "Id": "key-$app-secrets-instance-trust-policy",
	  "Version": "2012-10-17",
	  "Statement": [
	    {
	      "Effect": "Allow",
	      "Principal": { "Service" : "ec2.amazonaws.com" },
	      "Action": "sts:AssumeRole"
	    }
	  ]
	}
	TRUSTPOLICY
    response=`aws iam create-role --role-name $instancerole --assume-role-policy-document file://$trustpolicy`
    rm $trustpolicy
    accesspolicy=`mktemp`
    cat <<-ACCESSPOLICY >> $accesspolicy
	{
	  "Id": "key-$app-secrets-instance-access-policy",
	  "Version": "2012-10-17",
	  "Statement": [
	    {
	        "Effect" : "Allow",
	        "Action" : "s3:GetObject",
	        "Resource" : "arn:aws:s3:::$bucket"
	    }
	  ]
	}
	ACCESSPOLICY
    aws iam put-role-policy --role-name $instancerole --policy-name $instance_access_policy \
        --policy-document file://$accesspolicy
    rm $accesspolicy
else
    echo "Found existing role $instancerole ($found)"
fi

# Group for managing secrets
group=$app-manage-secrets
group_policy=$app-secrets-s3-read-write
found=`aws iam list-groups --query "Groups[?GroupName == '$group'] | [0].GroupName" --output text`
if [ "$found" == "None" ]; then
    echo "Creating group $group"
    response=`aws iam create-group --group-name $group`
    accesspolicy=`mktemp`
    cat <<-ACCESSPOLICY >> $accesspolicy
	{
	  "Id": "key-$app-secrets-group-access-policy",
	  "Version": "2012-10-17",
	  "Statement": [
	    {
	        "Effect" : "Allow",
	        "Action" : [
              "s3:GetObject",
              "s3:PutObject"
            ],
	        "Resource" : "arn:aws:s3:::$bucket"
	    }
	  ]
	}
	ACCESSPOLICY
    aws iam put-group-policy --group-name $group --policy-name $group_policy \
        --policy-document file://$accesspolicy
else
    echo "Group $group exists."
fi

sample_user=`aws iam list-users --query 'Users[0].UserName' --output text`
echo "Done!"
echo
echo
echo "Now what?"
echo
echo "Add a user to $group:"
echo "# aws iam add-user-to-group --group-name $group --user-name $sample_user"
echo
echo "View the current users in $group:"
echo "# aws iam get-group --group-name $group"
echo
echo "Create a file with an environment containing secret keys:"
echo "echo 'export foo=bar$RANDOM' > .aws-secrets"
echo
echo "Encrypt and send it to s3 :"
echo "send-aws-secrets $app .aws-secrets"
echo
echo "Retrieve it locally:"
echo "retrieve-aws-secrets $app"
echo
echo "Start an instance that can access the secrets:"
echo "aws ec2 start --policy zzzzz"
echo
echo "Get the secrets on the instance : "
echo "curl http://192 > local-secrets"




